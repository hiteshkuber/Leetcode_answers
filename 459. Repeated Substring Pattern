/*
Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.
*/

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();
        
        for(int i = 1;i <n; i++) {
            if(n%i == 0) {
            String sub = s.substring(0, i);
            if(s.equals(bigString(sub, n/i))) {
               return true;
            }
           }
        }

        return false;
    }

    private String bigString(String s, int n) {
        String res = "";
        for(int i = 0 ;i< n ; i++) {
            res +=s;
        }
        return res;
    }
}
