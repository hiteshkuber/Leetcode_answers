/*
Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        LinkedList<TreeNode> current = new LinkedList();
        boolean ltr = true , shouldReverse = true;
        current.add(root);
        while(current.size() != 0) {
            List<Integer> list = new ArrayList();
            LinkedList<TreeNode> next = new LinkedList();
            if(ltr) { 
                for(int i=0;i<current.size();i++) {
                    TreeNode t = current.get(i);
                    if(t!=null) {
                        list.add(t.val);
                        next.add(t.left);
                        next.add(t.right);
                    }
                }
            } else {
                for(int i=current.size()-1; i>=0 ;i--) {
                    TreeNode t = current.get(i);
                    if(t!=null) {
                        list.add(t.val);
                        next.addFirst(t.right);
                        next.addFirst(t.left);
                    }
                }
            }
            if(list.size() != 0)
                result.add(list);
            current = next;
            ltr = !ltr;
        }
        return result;
    }
}
