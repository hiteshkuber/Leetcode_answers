/*
Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.
*/
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n=mat.length,m=mat[0].length;
        int[][] res = new int[n][m];
        int length=0;
        
        List<Pair<Integer,Integer>> list = new ArrayList();

        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                res[i][j] = -1;
                if(mat[i][j]==0) {
                    list.add(new Pair(i,j));
                }
            }
        }
        
        while(!list.isEmpty()) {
            List<Pair<Integer,Integer>> next = new ArrayList();
            for(Pair<Integer,Integer> p:list) {
                int i=p.getKey(),j=p.getValue();
                res[i][j] = length;
                if( i>0 && mat[i-1][j]!=0 && res[i-1][j]==-1) {
                    res[i-1][j]=-2;
                    next.add(new Pair(i-1,j));
                } 
                if( i<n-1 && mat[i+1][j]!=0 && res[i+1][j]==-1) {
                    res[i+1][j]=-2;
                    next.add(new Pair(i+1,j));
                } 
                if( j>0 && mat[i][j-1]!=0 && res[i][j-1]==-1) {
                    res[i][j-1]=-2;
                    next.add(new Pair(i,j-1));
                } 
                if( j<m-1 && mat[i][j+1]!=0 && res[i][j+1]==-1) {
                    res[i][j+1]=-2;
                    next.add(new Pair(i,j+1));
                }
            }
            
            length++;
            list=next;
        }
        
        return res;
    }
}
