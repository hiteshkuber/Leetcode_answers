/*
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
*/
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        boolean medians = (n1+n2)%2==0;
        int prev = 0;
        int x = (n1+n2)/2;
        int start = 0, i = 0,j = 0;
        int median = 0;
        
        while(x>=start && i<n1 && j <n2) {
            prev = median;
            if(nums1[i] > nums2[j]) {
                median = nums2[j];
                j++;
            } else {
                median = nums1[i];
                i++;
            }
            start++;
        }
        
        while(x>=start && i<n1) {
            prev=median;
            median =nums1[i];
            i++;
            start++;
        }
        
        while(x>=start && j<n2) {
            prev=median;
            median =nums2[j];
            j++;
            start++;
        }
        
        
        if(medians)
            return (float) (prev+median)/2;
        return median;
    }
}
