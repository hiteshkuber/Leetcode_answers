/*
Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].

 

Example 1:

Input: n = 3
Output: 3
Example 2:

Input: n = 11
Output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.
 

Constraints:

1 <= n <= 231 - 1
*/
class Solution {
    public int findNthDigit(int n) {
        int numBefore = 0;
        int digitsBefore = 0;
        int numDigits = 1;
        long subRange = 9;
        while (digitsBefore + numDigits * subRange < n) {
            digitsBefore += numDigits * subRange;
            numBefore += subRange;
            subRange *= 10;
            numDigits++;
        }
        
        int containingNumber = (n - digitsBefore - 1) / numDigits + numBefore + 1;
        int digitIndex = (n - digitsBefore - 1) % numDigits;
        String strNum = String.valueOf(containingNumber);
        return strNum.charAt(digitIndex) - '0';
    }
}
