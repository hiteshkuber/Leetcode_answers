/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start =0;
        int end =nums.length-1;
        while(start<=end) {
            if(nums[start] < target)
                start++;
            if(nums[end] > target)
                end--;
            if(start==nums.length || end == -1)
                break;
            if(nums[start] == nums[end] && nums[start]==target) {
                break;
            }
        }
        int[] a = new int[2];
        if(start > end) {
            a[0]=-1;
            a[1]=-1;
            return a;
        }
        a[0]=start;
        a[1]=end;
        return a;
    }
}
