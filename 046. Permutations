/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
Accepted
1,129,576
Submissions
1,568,082
*/
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList();
        allPermutation(result, new ArrayList(), nums, nums.length, 0);
        return result;
    }
    
    public void allPermutation(List<List<Integer>> result, List<Integer> current, int[] nums, int size, int z) {
        if(current.size() == size) {
            result.add(current);
            return;
        }

        for(int i=0;i<size;i++) {
            List<Integer> prev= new ArrayList();
            if(!current.contains(nums[i]))
            {
                prev.addAll(current);
                prev.add(nums[i]);
                allPermutation(result, prev, nums, size, z+1); 
            }
        }
    }    
}
