/*
2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *result;
        int diff = difference(l1, l2);
        if(diff < 0) {
            return finalResult(l2, l1, diff*(-1));
        } else {
            return finalResult(l1,l2, diff);
        }
    }
    
    ListNode* finalResult(ListNode* l1, ListNode* l2, int diff) {
        ListNode *part1, *part2, *result=nullptr, *save, *prev;
        part1 = new ListNode();
        while(diff > 0) {
            diff--;
            if(result==nullptr) {
                result =  new ListNode(l1->val);
                l1 = l1->next;
                save=result;
            } else {
                prev = new ListNode(l1->val, result);
                result = prev;
                l1=l1->next;
            }
        }
        part2= sameLengthResult(l1, l2, part1);
        
        
        while(result!=nullptr){
            int val1 = (part2->val + result->val)%10;
            int val2 = (part2->val + result->val)/10;
            part2->val = val1;
            result=result->next;
            if(val2!=0) {
                prev=new ListNode(val2, part2);
                part2=prev;
            }
        }
        
        
        return part2;
    }
    
    ListNode* sameLengthResult(ListNode* l1, ListNode* l2, ListNode* result) {
        
        if(l1->next == nullptr && l2->next ==nullptr) {
            int val1 = (l1->val + l2->val)%10;
            int val2 = (l1->val + l2->val)/10;
            result->val=val2;
            result->next=new ListNode(val1, nullptr);
            return result;
        } else {
            sameLengthResult(l1->next, l2->next, result);
            int val1 = (l1->val + l2->val + result->val)%10;
            int val2 = (l1->val + l2->val + result->val)/10;
            ListNode *p1= new ListNode(val1, result->next);
            result->val=val2;
            result->next=p1;
        }
        return result;
    }
    
    int difference(ListNode* l1, ListNode* l2) {
        if(l1->next == nullptr && l2->next == nullptr) {
            return 0;
        } else if(l1->next == nullptr) {
            return difference(l1, l2->next) - 1;
        } else if(l2->next == nullptr) {
            return difference(l1->next, l2) + 1;
        } else {
            return difference(l1->next, l2->next);
        }
    }
};
