/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
Accepted
1,081,523
Submissions
1,921,840
*/



class Solution {
    public int trap(int[] height) {
        int n=height.length, total=0;
        int[] leftMax = new int[n], rightMax = new int[n];
        int temp=height[0];
        leftMax[0]=temp;
        for(int i=1; i<n;i++) {
            if(height[i] > temp)
                temp = height[i];
            
            leftMax[i] = temp;
        }        
        temp=height[n-1];
        rightMax[n-1]=temp;
        for(int i=n-2; i>=0;i--) {
            if(height[i] > temp)
                temp=height[i];
            rightMax[i]=temp;
        }
        int min=0;
        for(int i=1;i<n;i++) {
            min = Math.min(leftMax[i], rightMax[i]);
            if((min - height[i]) > 0) {
                total += (min -height[i]);
            }
        }
        return total;
    }
}
